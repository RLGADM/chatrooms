// App.tsx avec reconnexion automatique, création de room, et expiration du localStorage pour currentRoom
import React, { useState, useEffect, useRef } from 'react';
import { io, Socket } from 'socket.io-client';
import Home from './components/Home';
import DemoMode from './components/DemoMode';
import KeepAlive from './components/KeepAlive';
import RoomCreated from './components/RoomCreated';
import SocketDebugger from './components/SocketDebugger';
import GameConfigModal from './components/GameConfigModal';
import { Room as RoomType, User, Message, GameParameters, Room } from './types';
import { getDefaultParameters } from './utils/defaultParameters';
import { GameState } from './types/index'; 

const SERVER_URL = import.meta.env.PROD ? 'https://kensho-hab0.onrender.com' : 'http://localhost:3000';
type SocketType = Socket;

// -------------------- UTILS POUR LOCALSTORAGE AVEC EXPIRATION --------------------
function setItemWithExpiry(key: string, value: any, ttl: number) {
  const now = new Date();
  const item = {
    value,
    expiry: now.getTime() + ttl,
  };
  localStorage.setItem(key, JSON.stringify(item));
}

function getItemWithExpiry(key: string) {
  const itemStr = localStorage.getItem(key);
  if (!itemStr) return null;
  try {
    const item = JSON.parse(itemStr);
    const now = new Date();
    if (now.getTime() > item.expiry) {
      localStorage.removeItem(key);
      return null;
    }
    return item.value;
  } catch {
    localStorage.removeItem(key);
    return null;
  }
}

const App: React.FC = () => {
  const [socket, setSocket] = useState<SocketType | null>(null);
  const [currentUser, setCurrentUser] = useState<User | null>(null);
  const [currentRoom, setCurrentRoom] = useState<RoomType | null>(null);
  const [error, setError] = useState<string | null>(null);
  const [isConnected, setIsConnected] = useState(false);
  const [isConnecting, setIsConnecting] = useState(true);
  const [isDemoMode, setIsDemoMode] = useState(false);
  const [inRoom, setInRoom] = useState(false);
  const [hydrated, setHydrated] = useState(false);
  const [pendingUsername, setPendingUsername] = useState<string | null>(null);
  const [showGameConfig, setShowGameConfig] = useState(false);
  const hasJoinedRoomRef = useRef(false);

  useEffect(() => {
    const storedRoom = getItemWithExpiry('currentRoom');
    if (storedRoom) {
      setCurrentRoom(storedRoom);
      setInRoom(true);
      console.log("🎯 Hydratation depuis localStorage : room rechargée");
    } else {
      localStorage.removeItem('currentRoom');
      console.log("🧹 Room expirée ou absente du localStorage");
    }
    setHydrated(true);
  }, []);

  useEffect(() => {
    const newSocket = io(SERVER_URL, {
      transports: ['websocket', 'polling'],
      timeout: 20000,
      reconnection: true,
      reconnectionDelay: 1000,
      reconnectionDelayMax: 5000,
      reconnectionAttempts: 10,
    });

    setSocket(newSocket);

    newSocket.on('connect', () => {
      console.log('✅ Connecté au serveur');
      setIsConnected(true);
      setIsConnecting(false);
    });

    newSocket.on('disconnect', () => {
      console.log('🔌 Déconnecté');
      setIsConnected(false);
    });

    return () => newSocket.close();
  }, []);

  useEffect(() => {
    if (
      socket &&
      currentRoom &&
      isConnected &&
      hydrated &&
      !hasJoinedRoomRef.current
    ) {
      console.log('🔁 Tentative de reconnexion à la room');
      const pseudo = prompt("Entrez votre pseudo pour rejoindre la room :");
      if (!pseudo) return;

      const user: User = { id: socket.id || '', username: pseudo, room: currentRoom.code };
      setCurrentUser(user);

      socket.emit('joinRoom', { username: pseudo, roomCode: currentRoom.code }, (response: any) => {
        if (response.success) {
          console.log('✅ Rejoint la room');
          hasJoinedRoomRef.current = true;
          setInRoom(true);
        } else {
          console.error('❌ Erreur de joinRoom:', response.error);
        }
      });
    }
  }, [socket, currentRoom, isConnected, hydrated]);

  const joinRoom = (user: User, room: RoomType) => {
    setCurrentUser(user);
    setCurrentRoom(room);
    setInRoom(true);
    setItemWithExpiry('currentRoom', room, 10 * 60 * 1000);
  };

  const handleCreateRoom = (username: string, gameMode: 'standard' | 'custom', parameters: GameParameters) => {
    if (!socket || !isConnected) {
      setError('Connexion au serveur en cours. Veuillez patienter.');
      return;
    }
    setPendingUsername(username);
    setShowGameConfig(true);
  };

  const handleGameConfigConfirm = (parameters: GameParameters) => {
    if (socket && isConnected && pendingUsername) {
      const user: User = {
        id: socket.id || '',
        username: pendingUsername,
        room: '',
        roomRole: 'Admin',
      };
      setCurrentUser(user);
      socket.emit('createRoom', {
        username: pendingUsername,
        gameMode: 'standard',
        parameters,
      });
      socket.emit('setGameParameters', parameters);
      setError(null);
      setPendingUsername(null);
      setShowGameConfig(false);
    }
  };

  const handleGameConfigCancel = () => {
    setPendingUsername(null);
    setShowGameConfig(false);
  };

  const handleJoinRoom = (username: string, roomCode: string) => {
    if (socket && isConnected) {
      const user: User = {
        id: socket.id || '',
        username,
        room: roomCode,
      };
      setCurrentUser(user);
      socket.emit('joinRoom', { username, roomCode }, (response: any) => {
        if (response.success) {
          console.log('✅ Rejoint la room avec succès');
          setInRoom(true);
        } else {
          setError(response.error || 'Erreur lors de la jonction de la room');
        }
      });
      setError(null);
    } else {
      setError('Connexion au serveur en cours. Veuillez patienter.');
    }
  };

  const handleLeaveRoom = () => {
    if (socket) {
      socket.disconnect();
      socket.connect();
    }
    setCurrentUser(null);
    setCurrentRoom(null);
    localStorage.removeItem('currentRoom');
    setError(null);
    setInRoom(false);
  };

  const handleDemoMode = () => setIsDemoMode(true);

  if (isDemoMode) return <DemoMode />;
  if (isConnecting) return <div>Connexion au serveur Kensho...</div>;
  if (!isConnected) return <div>Erreur de connexion au serveur.</div>;

  if (inRoom && currentRoom && currentUser) {
    return (
      <>
        <RoomCreated
          room={currentRoom}
          currentUser={currentUser}
          onSendMessage={(msg) => socket?.emit('sendMessage', msg)}
          onLeaveRoom={handleLeaveRoom}
          socket={socket}
        />
        <SocketDebugger socket={socket} isConnected={isConnected} />
      </>
    );
  }

  return (
    <>
      <KeepAlive serverUrl={SERVER_URL} />
      <SocketDebugger socket={socket} isConnected={isConnected} />
      <Home
        onCreateRoom={handleCreateRoom}
        onJoinRoom={handleJoinRoom}
        onDemoMode={handleDemoMode}
        error={error}
        isConnected={isConnected}
      />
      {showGameConfig && (
        <GameConfigModal
          onConfirm={handleGameConfigConfirm}
          onCancel={handleGameConfigCancel}
        />
      )}
    </>
  );
};

export default App;
